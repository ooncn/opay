package alipay

import (
	"fmt"
	"github.com/ooncn/common/obj"
	"github.com/ooncn/common/util"
	"github.com/vmihailenco/msgpack"
	"regexp"
	"testing"
	"time"
)

var (
	// TODO 支付宝应用私钥
	RsaPrivateKey = ""
	// TODO 支付宝应用公钥
	RsaPublicKey = ""
	// TODO 支付宝公钥
	PublicKey  = ""
	AppId      = ""     // TODO 支付宝应用开发APPID
	SignType   = "RSA2" // TODO 签名类型
	EncryptKey = ""     // TODO 加密密钥

	config = AopClient{
		AppId:       AppId,
		GatewayUrl:  "https://openapi.Alipay.com/gateway.do", //网关
		Format:      "JSON",                                  //返回数据格式
		PostCharset: "UTF-8",
		//PostCharset:   "GBK",
		ApiVersion:    "1.0",
		RsaPrivateKey: RsaPrivateKey,
		RsaPublicKey:  RsaPublicKey,
		PublicKey:     PublicKey,
		DebugInfo:     false,
		FileCharset:   "UTF-8",
		//FileCharset:   "GBK",
		RESPONSE_SUFFIX: "_response",
		ERROR_RESPONSE:  "error_response",
		SIGN_NODE_NAME:  "sign",
		SignType:        SignType,   //签名类型
		EncryptKey:      EncryptKey, //加密密钥；加密类型默认：AES
		EncryptType:     "AES",
	} //TODO 网页支付配置
	AliReqPC *Request //TODO 网页支付返回

	miniConfig = AopClient{
		AppId:      AppId,
		GatewayUrl: "https://openapi.Alipay.com/gateway.do",
		Format:     "JSON",
		ApiVersion: "1.0",
		//PostCharset:           "utf-8",
		PostCharset:   "GBK",
		RsaPrivateKey: RsaPrivateKey,
		RsaPublicKey:  RsaPublicKey,
		PublicKey:     PublicKey,
		DebugInfo:     false,
		//FileCharset:           "utf-8",
		FileCharset:           "GBK",
		RESPONSE_SUFFIX:       "_response",
		ERROR_RESPONSE:        "error_response",
		SIGN_NODE_NAME:        "sign",
		ENCRYPT_XML_NODE_NAME: "",
		NeedEncrypt:           false,
		SignType:              SignType,   //签名类型
		EncryptKey:            EncryptKey, //加密密钥；加密类型默认：AES
		EncryptType:           "AES",
	} //TODO 小程序端
	AliReqMini *Request
)

func init() {
	//AliReqMini = NewRequestClient(miniConfig)
	AliReqPC = NewRequestClient(config)
}

/*
当面付款，扫描用户付款码收款
alipay.trade.pay(统一收单交易支付接口)
收银员使用扫码设备读取用户手机支付宝“付款码”获取设备（如扫码枪）读取用户手机支付宝的付款码信息后，将二维码或条码信息通过本接口上送至支付宝发起支付。
*/

func TestAlipayTradePay(t *testing.T) {
	fileName := AlipayConfigFileName
	b, err := msgpack.Marshal(&config)
	if err != nil {
		fmt.Println(err)
		return
	}
	str := string(b[:])
	// err = util.SaveConfigFile("db.o", util.PuEncrypt(str))
	err = util.SaveConfigFile(fileName, str)
	fmt.Println(err)

	str, err = util.ReaderFile(fileName)
	if err != nil {
		fmt.Println("数据库配置文件获取失败" + err.Error())
		return
	}
	// err = msgpack.Unmarshal([]byte(util.PuDecrypt(str)), &set)
	err = msgpack.Unmarshal([]byte(str), &config)
	fmt.Println(util.JsonToStr(&config))
} //扫码支付
func TestAlipayTradeWapPay(t *testing.T) {
	AliReqPC.SetReturnUrl("http://c.free.idcfengye.com/pay/notify/web_pay")
	AliReqPC.SetNotifyUrl("http://c.free.idcfengye.com/pay/notify/web_pay")
	var c = ApiTradeWapPayNew(fmt.Sprintf(`%d`, time.Now().Unix()), "硬盘盒子", "", 0.01)
	AliReqPC.SetBizContentJson(c)
	h := AliReqPC.HTTPPOST(c.GetMethod())
	fmt.Println(h)
	fmt.Println(h.Url)
	fmt.Println(h.Params)
	//h.Query()
	//str := h.ResponseBody
	//if str == "" {
	//	return
	//}
} //手机端支付
func TestAlipayTradePagePay(t *testing.T) {
	AliReqPC.SetReturnUrl("http://c.free.idcfengye.com/pay/notify/page_pay")
	AliReqPC.SetNotifyUrl("http://c.free.idcfengye.com/pay/notify/page_pay")
	code := fmt.Sprintf(`%d`, time.Now().Unix())
	fmt.Println(code)
	var c = ApiTradePagePayNew(code, "硬盘盒子", "", 0.01)
	AliReqPC.SetBizContentJson(c)
	h := AliReqPC.HTTPPOST(c.GetMethod())
	fmt.Print(h.Url + "?")
	fmt.Println(h.Params)
	fmt.Println()

} // 支付

func TestApiTradeRefund(t *testing.T) {
	AliReqPC.SetNotifyUrl("http://c.free.idcfengye.com/pay/notify/refund")
	var c = ApiTradeRefundNew("1614239569", "", "不需要了", 0.01)
	AliReqPC.SetBizContentJson(c)
	h := AliReqPC.HTTPPOST(c.GetMethod())
	fmt.Print(h.Url + "?")
	fmt.Println(h.Params)
	h.Query()
	m, i := AlipayVerifySyn(h.ResponseBody, PublicKey)
	if i == nil {
		fmt.Println(m)
	} else {
		fmt.Println("验签失败")
	}
	/*
	   type AutoGenerated struct {
	   	AlipayTradeRefundResponse struct {
	   		Code         string `json:"code"`
	   		Msg          string `json:"msg"`
	   		BuyerLogonID string `json:"buyer_logon_id"`
	   		BuyerUserID  string `json:"buyer_user_id"`
	   		FundChange   string `json:"fund_change"`
	   		GmtRefundPay string `json:"gmt_refund_pay"`
	   		OutTradeNo   string `json:"out_trade_no"`
	   		RefundFee    string `json:"refund_fee"`
	   		SendBackFee  string `json:"send_back_fee"`
	   		TradeNo      string `json:"trade_no"`
	   	} `json:"alipay_trade_refund_response"`
	   	Sign string `json:"sign"`
	   }
	*/
} // 卖家退款接口
func TestApiTradePageRefund(t *testing.T) {
	var c = ApiTradePageRefundNew(fmt.Sprintf(`%d`, time.Now().Unix()), "硬盘盒子", "", 0.01)
	AliReqPC.SetBizContentJson(c)
	h := AliReqPC.HTTPPOST(c.GetMethod())
	fmt.Print(h.Url + "?")
	fmt.Println(h.Params)

} // 卖家退款页面
func TestApiTradeQueryNew(t *testing.T) {
	var c = ApiTradeQueryNew("1614159490", "")
	AliReqPC.SetBizContentJson(c)
	h := AliReqPC.HTTPPOST(c.GetMethod())
	fmt.Print(h.Url + "?")
	fmt.Println(h.Params)
	h.Query()
	fmt.Println(h.ResponseBody)
	AliReqPC.CheckSign()
} // 卖家退款页面

func TestCheckSignObj(t *testing.T) {
	str := `{"app_id":"2021002128632452","auth_app_id":"2021002128632452","buyer_id":"2088802237021160","buyer_pay_amount":"0.01","charset":"UTF-8","fund_bill_list":"[{\"amount\":\"0.01\",\"fundChannel\":\"COUPON\"}]","gmt_create":"2021-02-25 09:13:07","gmt_payment":"2021-02-25 09:13:11","invoice_amount":"0.00","notify_id":"2021022500222091312021161437803402","notify_time":"2021-02-25 09:13:12","notify_type":"trade_status_sync","out_trade_no":"1614215569","point_amount":"0.00","receipt_amount":"0.01","seller_id":"2088911570786321","sign":"PCPD0KaONOCAHbRDsRI8DssJ3+TTSv1FqX/JYAbi4jNk3QF6jV1tl/dFvl1t+oYCZaKt+EMPEA3cJdotkezxo0jN65YPx5fFb+qS/2gKhwQ/kLBa30BU8VwqpUKGV6RND5O0WiwVv1CvhTdBOQLnvuhfo+3enSksZkBko5Uv6EJOsI4xhHLw65xenB4k+j+P2a3U6Vj4c9eIvWpSVymyQkShvp94sHisp6G9qUfa+9YYqzO3AZ8cfREsiSakX+WYQ7Rj3ZobXK8kUgw4zjcLs/KUP/B28UI1tcsUIR5kS3D3Hn2YjQpl9UvsbHMPFTVnlQ8DPZ8PNeQ+DXP7HyiaKg==","sign_type":"RSA2","subject":"硬盘盒子","total_amount":"0.01","trade_no":"2021022522001421161413605731","trade_status":"TRADE_SUCCESS","version":"1.0"}`
	m := make(obj.Map)
	util.JsonToType(str, &m)
	delete(m, "sign_type")
	if err := AlipayVerifyMap(m, PublicKey); err == nil {
		fmt.Println("true")
	} else {
		fmt.Println("false")
	}
} // 验签
func TestCheckSign(t *testing.T) {
	str := `{"alipay_trade_refund_response":{"code":"10000","msg":"Success","buyer_logon_id":"wei***@qq.com","buyer_user_id":"2088802237021160","fund_change":"Y","gmt_refund_pay":"2021-02-25 14:26:28","out_trade_no":"1614216765","refund_fee":"0.01","send_back_fee":"0.00","trade_no":"2021022522001421161413204833"},"sign":"fkX9kJsqjydjYbiIewtFcccYkYc4lIjq3OaKuJV9gxR7oC6ioyXLTi6W+wFg+MCNPjpJE63DFg0yAcMLXkJJ9db6tcEQ8VldYfbCStnhK0622GuOC6XtOBlRXR7jKdtqmwznalK3ggCOnii0xKiTwtnQU3ZjJ1z9G5E4KQN5xgZ2NiTJVo4RUfPOofJ8tAleJpPXk5MgzXP6S6vGdhsNis5dC86db0vTHR4emGTLsAhLCLJHCbsq9Xtk9FfLu4jxYWczK0a+DeegEISgG/jpmK71/bL8mvhjTdm+EklzvKSnm2jlySJVNsVgzgE+Bz8Otit4f8420oi1KHRNAgcw4A=="}`
	reg := regexp.MustCompile(`{"alipay_.*_response":{(.*)},"sign":".*`)
	m := reg.ReplaceAllString(str, `{$1}`)
	//v := reg.FindAllStringSubmatch(str,-1)
	//fmt.Println(v[0][1])
	reg = regexp.MustCompile(`.*"sign":"([^"]*)".*`)
	sign := reg.ReplaceAllString(str, `$1`)
	//v = reg.FindAllStringSubmatch(str,-1)
	//fmt.Println(v[0][1])
	if err := AlipayVerify(m, sign, PublicKey); err == nil {
		fmt.Println("true")
	} else {
		fmt.Println("false")
	}
} // 同步验签

func TestAliapy(t *testing.T) {
	fileName := AlipayConfigFileName
	b, err := msgpack.Marshal(&config)
	if err != nil {
		fmt.Println(err)
		return
	}
	str := string(b[:])
	// err = util.SaveConfigFile("db.o", util.PuEncrypt(str))
	err = util.SaveConfigFile(fileName, str)
	fmt.Println(err)

	str, err = util.ReaderFile(fileName)
	if err != nil {
		fmt.Println("数据库配置文件获取失败" + err.Error())
		return
	}
	// err = msgpack.Unmarshal([]byte(util.PuDecrypt(str)), &set)
	err = msgpack.Unmarshal([]byte(str), &config)
	fmt.Println(util.JsonToStr(&config))
}
func TestUserInfoAuth(t *testing.T) {
	r := NewRequestClient(config)
	r.CheckSign()
	// 公钥解密私钥加密
}
func TestRequest_SystemOauthToken(t *testing.T) {
	m, _ := AliReqMini.SystemOauthToken("f9a7d2d0d1e84e408565ba5486edXX17", "")
	fmt.Println(util.JsonToStr(m))
}
func TestRequest_UserInfoShare(t *testing.T) {
	m, _ := AliReqMini.UserInfoShare("authusrBeee559f506094074b673c54878dc2X16")
	fmt.Println(util.JsonToStr(m))
}

func TestRequest_MiniTemplatemessageSend(t *testing.T) {
	data := AlipayOpenAppMiniTemplatemessageSend{
		ToUserId:       "",
		FormId:         "",
		UserTemplateId: "",
		Page:           "",
		Data:           "",
	}
	AliReqMini.MiniTemplatemessageSend(data)
}

func TestRequest_LoginUri(t *testing.T) {
	fmt.Println(AliReqMini.LoginUri("http://on.free.idcfengye.com/api/alipay/callback", "auth_user", util.RandAaInt(6)))
}
